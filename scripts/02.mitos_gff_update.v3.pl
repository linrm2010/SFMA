#! /usr/bin/perl -w
################################################################################
# mitos_gff_update.pl version 3.0 
# 2024-03-25
# Copyright (C) Runmao Lin, Tong Liu, Xiaoting Wang, Fanxing Yang, Zhiyin Wang, 2023
# Contact (E-mail): linrunmao@hainanu.cn
#
# This program is provided under the terms of a personal license to the recipient and
# may only be used for the recipient's own research at an academic insititution.
#
# For using this program in a company or for commercial purposes, a commercial license
# is required.
#
# The purpose of this program is to update gff file generated by Mitos.
################################################################################

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;

my $mitos_result_gff;
my $output_prefix;
my $help;

GetOptions
(
	"mitos_result_gff=s" => \$mitos_result_gff,                         # string
	"output_prefix=s" => \$output_prefix,                               # string
	"help" => \$help                                                    # flag
);

################################################################################
# usage
############################# usage begin ######################################
my $usage= << "USAGE";

Example: perl $0 -mitos_result_gff  mitos_result.gff  -output_prefix  mitos_update 
version: 1.0
Options:
        -mitos_result_gff <file>               mitos gff file, such as 'mitos_result.gff'
        -output_prefix <strings>               such as 'mitos_update'
        -help                                  print help information

USAGE
############################## usage end #######################################

if ($help || !(defined $mitos_result_gff) || !(defined $output_prefix))
{
	print $usage;
	exit;
}

my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
my ($timesecond, $timeminute, $timehour, $timedaymonths, $timemonth, $timeyear, $timedayweek, $timedayYear, $timedaylightsavings) = localtime();
$timeyear+=1900;

print "[$timehour\:$timeminute\:$timesecond\, $months[$timemonth] $timedaymonths\, $timeyear] ";
print "Start to run the \'$0\' program ...\n";

################################################################################
# Reading 'mitos_result_gff'
################################################################################

print "Reading '$mitos_result_gff' file ...\n";

# mitos_result.gff
# protein-coding gene
# T203_mitogenome	mitos	gene	1725	3086	.	+	.	ID=gene_rps3;Name=rps3;gene_id=rps3
#T203_mitogenome	mitos	exon	1725	3086	9815019.5	+	3	Parent=transcript_rps3;Name=rps3
#
#T203_mitogenome	mitos	gene	8882	9838	.	+	.	ID=gene_giy;Name=giy;gene_id=giy
#T203_mitogenome	mitos	exon	8882	9838	3546694.9	+	2	Parent=transcript_giy;Name=giy
# 
# tRNA
#T203_mitogenome	mitfi	ncRNA_gene	28292	28363	.	+	.	ID=gene_trnP;Name=trnP;gene_id=trnP
#T203_mitogenome	mitfi	tRNA	28292	28363	.	+	.	ID=transcript_trnP(tgg);Name=trnP(tgg);Parent=gene_trnP(tgg);gene_id=trnP(tgg)
#T203_mitogenome	mitfi	exon	28292	28363	4.399999994785149e-17	+	.	Parent=transcript_trnP;Name=trnP
#
# rRNA
#T203_mitogenome	mitfi	exon	1	1594	0.0	+	.	Parent=transcript_rrnL_0;Name=rrnL_0-b
#T203_mitogenome	mitfi	ncRNA_gene	3116	3723	.	+	.	ID=gene_rrnL_1;Name=rrnL_1;gene_id=rrnL_1
#T203_mitogenome	mitfi	rRNA	3116	3723	.	+	.	ID=transcript_rrnL_1;Name=rrnL_1;Parent=gene_rrnL_1;gene_id=rrnL_1
#T203_mitogenome	mitfi	exon	3116	3723	0.0	+	.	Parent=transcript_rrnL_1;Name=rrnL_1
# T203_mitogenome	mitfi	ncRNA_gene	1	29583	.	+	.	ID=gene_rrnL_0;Name=rrnL_0;gene_id=rrnL_0
#T203_mitogenome	mitfi	rRNA	1	29583	.	+	.	ID=transcript_rrnL_0;Name=rrnL_0;Parent=gene_rrnL_0;gene_id=rrnL_0
#T203_mitogenome	mitfi	exon	28553	29583	0.0	+	.	Parent=transcript_rrnL_0;Name=rrnL_0-a
#
# origin_of_replication
#CP084950.1	mitfi	origin_of_replication	23334	23363	.	-	.	ID=gene_OL;gene_id=OL

# output gff format
# T069_mito	exonerate	gene	30	1103	722	+	.	ID=gene:gene_00157;Name=gene_00157; gene_orientation .
# T069_mito	exonerate	mRNA	30	1103	722	+	.	ID=mRNA:gene_00157;Name=gene_00157;Parent=gene:gene_00157
# T069_mito	exonerate	CDS	30	1103	.	+	.	ID=CDS:gene_00157.1;Parent=mRNA:gene_00157
# T069_mito	exonerate	exon	30	1103	.	+	.	ID=exon:gene_00157.1;Parent=mRNA:gene_00157

open OA,">$output_prefix\.gene.gff";
open OB,">$output_prefix\.tRNA.gff";
open OC,">$output_prefix\.rRNA.gff";
open OD,">$output_prefix\.origin_of_replication.txt";

my %infor;
my @gene_id;
my @tRNA_id;
my @rRNA_id;
open G,"$mitos_result_gff" || die "Cannot open the file '$mitos_result_gff'.\n";
while(<G>)
{
	chomp;
	my @sp=split(/\t/,$_);
	if($_=~/\tgene\t/)
	{
		my $id=(split(/;/,$sp[8]))[-1];
		$id=~s/gene_id=//;
		push(@gene_id,$id);
		$infor{$id}.="$_\n";
	}
	elsif($_=~/\ttRNA\t/)
	{
		my $id=(split(/\;/,$sp[8]))[-1];
		$id=~s/gene_id=//;
		$id=(split(/\(/,$id))[0];
		push(@tRNA_id,$id);
		$infor{$id}.="$_\n";
	}
	elsif($_=~/\trRNA\t/)
	{
		my $id=(split(/\;/,$sp[8]))[-1];
		$id=~s/gene_id=//;
		push(@rRNA_id,$id);
		$infor{$id}.="$_\n";
	}
	elsif($_=~/\torigin_of_replication\t/)
	{
		print OD "$_\n";
	}
	elsif($_=~/\texon\t/)
	{
		my $id=(split(/\;/,$sp[8]))[-1];
		$id=~s/Name=//;
#		my $id=(split(/\;/,$sp[8]))[0];
#		$id=~s/Parent=transcript\_//;
		$infor{$id}.="$_\n";
	}
}
close G;
close OD;

for(my $i=0;$i<@gene_id;$i++)
{
	my @isp=split(/\n/,$infor{$gene_id[$i]});
	for(my $j=0;$j<@isp;$j++)
	{
		my @gsp=split(/\t/,$isp[$j]);
		if($isp[$j]=~/\tgene\t/)
		{
			print OA "$gsp[0]\t$gsp[1]\tgene\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=gene\:$gene_id[$i]\;Name=$gene_id[$i]\n";
			print OA "$gsp[0]\t$gsp[1]\tmRNA\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=mRNA\:$gene_id[$i]\;Name=$gene_id[$i]\;Parent=gene\:$gene_id[$i]\n";
		}
		elsif($isp[$j]=~/\texon\t/)
		{
			print OA "$gsp[0]\t$gsp[1]\tCDS\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=CDS:$gene_id[$i]\;Parent=mRNA:$gene_id[$i]\n";
			print OA "$gsp[0]\t$gsp[1]\texon\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=exon:$gene_id[$i]\;Parent=mRNA:$gene_id[$i]\n";
		}
	}
}
close OA;

for(my $i=0;$i<@tRNA_id;$i++)
{
	my @isp=split(/\n/,$infor{$tRNA_id[$i]});
	for(my $j=0;$j<@isp;$j++)
	{
		my @gsp=split(/\t/,$isp[$j]);
		if($isp[$j]=~/\ttRNA\t/)
		{
			print OB "$gsp[0]\t$gsp[1]\ttRNA\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=tRNA:$tRNA_id[$i]\;Name=$tRNA_id[$i]\n";
		}
	}
}
close OB;

for(my $i=0;$i<@rRNA_id;$i++)
{
	my @isp=split(/\n/,$infor{$rRNA_id[$i]});
	for(my $j=0;$j<@isp;$j++)
	{
		my @gsp=split(/\t/,$isp[$j]);
		if($isp[$j]=~/\trRNA\t/)
		{
			print OC "$gsp[0]\t$gsp[1]\trRNA\t$gsp[3]\t$gsp[4]\t\.\t$gsp[6]\t\.\tID=rRNA:$rRNA_id[$i]\;Name=$rRNA_id[$i]\n";
		}
	}
}
close OC;

($timesecond, $timeminute, $timehour, $timedaymonths, $timemonth, $timeyear, $timedayweek, $timedayYear, $timedaylightsavings) = localtime();
$timeyear+=1900;
print "[$timehour\:$timeminute\:$timesecond\, $months[$timemonth] $timedaymonths\, $timeyear] ";
print "End of running the \'$0\' program.\n";

__END__
